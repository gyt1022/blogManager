package com.guo.controller;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;import com.guo.entity.BlogUser;import com.guo.entity.BlogUserExample;import com.guo.entity.BlogUserWithBLOBs;import com.guo.service.IUserService;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.scheduling.annotation.Async;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletResponse;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @author guoyutao * @date 2019/04/07 */@Controller@RequestMapping(value = "/user")public class UserController {    @Autowired    private IUserService userService;    /**     * 查询所有用户     * @return     */    @Async    @RequestMapping(value = "/query",method = RequestMethod.GET)    public String queryAll(Model model,@RequestParam(defaultValue = "1") int pageNum, @RequestParam(defaultValue = "2") int pageSize) {        Map<String,Object> result = new HashMap<>();        PageHelper.startPage(pageNum,pageSize);        BlogUserExample userExample=new BlogUserExample();        List<BlogUserWithBLOBs> users = userService.queryAll(userExample);        PageInfo<BlogUserWithBLOBs> pageInfo = new PageInfo<>(users);        model.addAttribute("users",users);        model.addAttribute("total",pageInfo.getTotal());        return "sys/userList";    }    /**     * 根据状态查询用户     * @param value     * @return     */    @Async    @RequestMapping(value = "/queryBy")    public Map<String, Object> queryBystate(String value) {        Map<String,Object> result = new HashMap<>();        BlogUserExample userExample=new BlogUserExample();        BlogUserExample.Criteria criteria=userExample.createCriteria();        if(StringUtils.isNotBlank(value)){            criteria.andBloguserIdEqualTo(value);        }        List<BlogUserWithBLOBs> users = userService.queryAll(userExample);        result.put("users",users);        return result;    }    /**     * 搜索查询用户     * @param value     * @return     */    @RequestMapping(value = "/queryBySerach")    public Map<String, Object> queryBySerach(String value) {        Map<String,Object> result = new HashMap<>();        BlogUserExample userExample=new BlogUserExample();        BlogUserExample.Criteria criteria1=userExample.createCriteria();        criteria1.andBloguserIdLike(value);        BlogUserExample.Criteria criteria2=userExample.createCriteria();        criteria2.andBloguserNameLike(value);        userExample.or(criteria2);        BlogUserExample.Criteria criteria3=userExample.createCriteria();        criteria3.andBloguserPhoneLike(value);        userExample.or(criteria3);        List<BlogUserWithBLOBs> users = userService.queryAll(userExample);        result.put("users",users);        return result;    }    @Async    @ResponseBody    @RequestMapping(value = "queryById")    public Map<String,Object> queryById(Model model,String userId){        BlogUserWithBLOBs bloguser=userService.queryById(userId);        Map<String,Object> result = new HashMap<>();        result.put("bloguser",bloguser);//        model.addAttribute("bloguser",bloguser);        return result;    }}